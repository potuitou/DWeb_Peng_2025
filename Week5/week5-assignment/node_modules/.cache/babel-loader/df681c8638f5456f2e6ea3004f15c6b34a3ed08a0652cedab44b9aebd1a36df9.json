{"ast":null,"code":"var _jsxFileName = \"/Users/peng/Documents/NYU/\\u7814\\u4E8C\\u4E0A/Dynamic Web/DWeb_Peng_2025/Week5/week5-assignment/src/components/Navbar.js\";\nimport React from 'react';\nimport { Link, NavLink } from 'react-router-dom';\nimport Panel from './Panel';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Navbar = () => {\n  /*\n  V6+ of REact Router changed the way NavLink works. You used to have access to a var isActive\n  Now we need to write an inline checker function\n  Here is how to style NavLink weith Tailwind and the new version of React Router and Remix\n  */\n\n  // define our base class and our active class at js vars\n\n  const baseClass = 'text-blue-500';\n  const activeClass = 'text-blue-500 border-l-4 border-blue-500 font-bold decoration-solid pl-4';\n  return /*#__PURE__*/_jsxDEV(Panel, {\n    className: \"sticky top-0 overflow-y-scroll flex flex-col item-start\",\n    children: [/*#__PURE__*/_jsxDEV(NavLink, {\n      to: \"/accordion1\",\n      className: ({\n        isActive\n      }) => isActive ? activeClass : baseClass,\n      children: \"Accordion1\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(NavLink, {\n      to: \"/accordion2\",\n      className: ({\n        isActive\n      }) => isActive ? activeClass : baseClass,\n      children: \"Accordion2\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 5\n  }, this);\n};\n\n/*\nLINK COMPONENTS DO THE JOB BUT THEY ARE NOT AWARE OF IF THEY ARE THE ACTIVE LINK\nconst Navbar = () => {\n  return (\n    <Panel className=\"sticky top-0 overflow-y-scroll flex flex-col item-start\">\n\n      <Link to=\"/\" className=\"text-blue-500\">\n        Button\n      </Link>\n\n      <Link to=\"/accordion\" className=\"text-blue-500\">\n        Accordion\n      </Link>\n\n      <Link to=\"/dropdown\" className=\"text-blue-500\">\n        Dropdown\n      </Link>\n    </Panel>\n  )\n}\n  */\n_c = Navbar;\nexport default Navbar;\nvar _c;\n$RefreshReg$(_c, \"Navbar\");","map":{"version":3,"names":["React","Link","NavLink","Panel","jsxDEV","_jsxDEV","Navbar","baseClass","activeClass","className","children","to","isActive","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/peng/Documents/NYU/研二上/Dynamic Web/DWeb_Peng_2025/Week5/week5-assignment/src/components/Navbar.js"],"sourcesContent":["import React from 'react'\nimport {Link, NavLink} from 'react-router-dom'\nimport Panel from './Panel'\n\nconst Navbar = () => {\n  /*\n  V6+ of REact Router changed the way NavLink works. You used to have access to a var isActive\n  Now we need to write an inline checker function\n  Here is how to style NavLink weith Tailwind and the new version of React Router and Remix\n  */\n\n  // define our base class and our active class at js vars\n\n  const baseClass = 'text-blue-500'\n  const activeClass =\n    'text-blue-500 border-l-4 border-blue-500 font-bold decoration-solid pl-4'\n  return (\n    <Panel className=\"sticky top-0 overflow-y-scroll flex flex-col item-start\">\n      {/* <NavLink\n        to=\"/\"\n        className={({isActive}) =>\n          // isActive is a prop we get for free from NavLink\n          // ({isActive}) => {} is like (props) => {const {isActive} = props}\n          // now we have isActive destructured out of our props we get for free from NavLink\n          // use a ternary to apply base or active class\n          //conditionToCheck ? return this is true : else do this\n          isActive ? activeClass : baseClass\n        }\n      >\n        Button\n      </NavLink> */}\n\n      <NavLink\n        to=\"/accordion1\"\n        className={({isActive}) => (isActive ? activeClass : baseClass)}\n      >\n        Accordion1\n      </NavLink>\n\n      <NavLink\n        to=\"/accordion2\"\n        className={({isActive}) => (isActive ? activeClass : baseClass)}\n      >\n        Accordion2\n      </NavLink>\n\n      {/* <NavLink\n        to=\"/dropdown\"\n        className={({isActive}) => (isActive ? activeClass : baseClass)}\n      >\n        Dropdown\n      </NavLink> */}\n    </Panel>\n  )\n}\n\n/*\nLINK COMPONENTS DO THE JOB BUT THEY ARE NOT AWARE OF IF THEY ARE THE ACTIVE LINK\nconst Navbar = () => {\n  return (\n    <Panel className=\"sticky top-0 overflow-y-scroll flex flex-col item-start\">\n\n      <Link to=\"/\" className=\"text-blue-500\">\n        Button\n      </Link>\n\n      <Link to=\"/accordion\" className=\"text-blue-500\">\n        Accordion\n      </Link>\n\n      <Link to=\"/dropdown\" className=\"text-blue-500\">\n        Dropdown\n      </Link>\n    </Panel>\n  )\n}\n  */\n\nexport default Navbar\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAAQC,IAAI,EAAEC,OAAO,QAAO,kBAAkB;AAC9C,OAAOC,KAAK,MAAM,SAAS;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE3B,MAAMC,MAAM,GAAGA,CAAA,KAAM;EACnB;AACF;AACA;AACA;AACA;;EAEE;;EAEA,MAAMC,SAAS,GAAG,eAAe;EACjC,MAAMC,WAAW,GACf,0EAA0E;EAC5E,oBACEH,OAAA,CAACF,KAAK;IAACM,SAAS,EAAC,yDAAyD;IAAAC,QAAA,gBAexEL,OAAA,CAACH,OAAO;MACNS,EAAE,EAAC,aAAa;MAChBF,SAAS,EAAEA,CAAC;QAACG;MAAQ,CAAC,KAAMA,QAAQ,GAAGJ,WAAW,GAAGD,SAAW;MAAAG,QAAA,EACjE;IAED;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAS,CAAC,eAEVX,OAAA,CAACH,OAAO;MACNS,EAAE,EAAC,aAAa;MAChBF,SAAS,EAAEA,CAAC;QAACG;MAAQ,CAAC,KAAMA,QAAQ,GAAGJ,WAAW,GAAGD,SAAW;MAAAG,QAAA,EACjE;IAED;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAS,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAQL,CAAC;AAEZ,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AApBAC,EAAA,GApDMX,MAAM;AA0EZ,eAAeA,MAAM;AAAA,IAAAW,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}